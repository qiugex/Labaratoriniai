
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000584  08000584  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000584  08000584  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000584  08000584  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000584  08000584  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000584  08000584  00010584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000588  08000588  00010588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800058c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 14 .debug_info   000015ad  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000578  00000000  00000000  00021624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001d8  00000000  00000000  00021ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000014b  00000000  00000000  00021d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001b6eb  00000000  00000000  00021ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000023aa  00000000  00000000  0003d5ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a82b5  00000000  00000000  0003f958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000598  00000000  00000000  000e7c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  000e81a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800056c 	.word	0x0800056c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800056c 	.word	0x0800056c

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	; (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <init_tim_gpio>:
#include "main.h"

void init_tim_gpio(void){
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0

RCC -> AHBENR |= RCC_AHBENR_GPIOEEN;
 8000208:	4b1a      	ldr	r3, [pc, #104]	; (8000274 <init_tim_gpio+0x70>)
 800020a:	695b      	ldr	r3, [r3, #20]
 800020c:	4a19      	ldr	r2, [pc, #100]	; (8000274 <init_tim_gpio+0x70>)
 800020e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000212:	6153      	str	r3, [r2, #20]
//TIM1_CH3, PE13, AF2 (alternate function)

GPIOE -> MODER |= GPIO_MODER_MODER9_1;
 8000214:	4b18      	ldr	r3, [pc, #96]	; (8000278 <init_tim_gpio+0x74>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a17      	ldr	r2, [pc, #92]	; (8000278 <init_tim_gpio+0x74>)
 800021a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800021e:	6013      	str	r3, [r2, #0]
GPIOE -> MODER &=~ GPIO_MODER_MODER9_0;
 8000220:	4b15      	ldr	r3, [pc, #84]	; (8000278 <init_tim_gpio+0x74>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a14      	ldr	r2, [pc, #80]	; (8000278 <init_tim_gpio+0x74>)
 8000226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800022a:	6013      	str	r3, [r2, #0]

GPIOE -> MODER &=~ GPIO_MODER_MODER13_1;
 800022c:	4b12      	ldr	r3, [pc, #72]	; (8000278 <init_tim_gpio+0x74>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a11      	ldr	r2, [pc, #68]	; (8000278 <init_tim_gpio+0x74>)
 8000232:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000236:	6013      	str	r3, [r2, #0]
GPIOE -> MODER |= GPIO_MODER_MODER13_0;
 8000238:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <init_tim_gpio+0x74>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a0e      	ldr	r2, [pc, #56]	; (8000278 <init_tim_gpio+0x74>)
 800023e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000242:	6013      	str	r3, [r2, #0]

//GPIOE -> AFR[1] |= GPIO_AFRH_AFRH2;
//GPIOE -> AFR[1] |= AFR_AFRH_AFRH5 & (1<<2);
GPIOE -> AFR[1] |= (1<<5);
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <init_tim_gpio+0x74>)
 8000246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000248:	4a0b      	ldr	r2, [pc, #44]	; (8000278 <init_tim_gpio+0x74>)
 800024a:	f043 0320 	orr.w	r3, r3, #32
 800024e:	6253      	str	r3, [r2, #36]	; 0x24

GPIOE -> OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9_0;
 8000250:	4b09      	ldr	r3, [pc, #36]	; (8000278 <init_tim_gpio+0x74>)
 8000252:	689b      	ldr	r3, [r3, #8]
 8000254:	4a08      	ldr	r2, [pc, #32]	; (8000278 <init_tim_gpio+0x74>)
 8000256:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800025a:	6093      	str	r3, [r2, #8]
GPIOE -> OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9_1;
 800025c:	4b06      	ldr	r3, [pc, #24]	; (8000278 <init_tim_gpio+0x74>)
 800025e:	689b      	ldr	r3, [r3, #8]
 8000260:	4a05      	ldr	r2, [pc, #20]	; (8000278 <init_tim_gpio+0x74>)
 8000262:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000266:	6093      	str	r3, [r2, #8]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	40021000 	.word	0x40021000
 8000278:	48001000 	.word	0x48001000

0800027c <init_tim>:

void init_tim(int dutty)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
//PWM 1 MODE
RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000284:	4b22      	ldr	r3, [pc, #136]	; (8000310 <init_tim+0x94>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	4a21      	ldr	r2, [pc, #132]	; (8000310 <init_tim+0x94>)
 800028a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800028e:	6193      	str	r3, [r2, #24]
TIM1 -> CCMR1 |= TIM_CCMR1_OC1PE;
 8000290:	4b20      	ldr	r3, [pc, #128]	; (8000314 <init_tim+0x98>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	4a1f      	ldr	r2, [pc, #124]	; (8000314 <init_tim+0x98>)
 8000296:	f043 0308 	orr.w	r3, r3, #8
 800029a:	6193      	str	r3, [r2, #24]

//Prescaler 0x0F
TIM1 -> PSC = 0x0F;
 800029c:	4b1d      	ldr	r3, [pc, #116]	; (8000314 <init_tim+0x98>)
 800029e:	220f      	movs	r2, #15
 80002a0:	629a      	str	r2, [r3, #40]	; 0x28

//

TIM1 -> CCMR1 &=~ TIM_CCMR1_OC1M_0;
 80002a2:	4b1c      	ldr	r3, [pc, #112]	; (8000314 <init_tim+0x98>)
 80002a4:	699b      	ldr	r3, [r3, #24]
 80002a6:	4a1b      	ldr	r2, [pc, #108]	; (8000314 <init_tim+0x98>)
 80002a8:	f023 0310 	bic.w	r3, r3, #16
 80002ac:	6193      	str	r3, [r2, #24]
TIM1 -> CCMR1 |= TIM_CCMR1_OC1M_1;
 80002ae:	4b19      	ldr	r3, [pc, #100]	; (8000314 <init_tim+0x98>)
 80002b0:	699b      	ldr	r3, [r3, #24]
 80002b2:	4a18      	ldr	r2, [pc, #96]	; (8000314 <init_tim+0x98>)
 80002b4:	f043 0320 	orr.w	r3, r3, #32
 80002b8:	6193      	str	r3, [r2, #24]
TIM1 -> CCMR1 |= TIM_CCMR1_OC1M_2;
 80002ba:	4b16      	ldr	r3, [pc, #88]	; (8000314 <init_tim+0x98>)
 80002bc:	699b      	ldr	r3, [r3, #24]
 80002be:	4a15      	ldr	r2, [pc, #84]	; (8000314 <init_tim+0x98>)
 80002c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002c4:	6193      	str	r3, [r2, #24]
TIM1 -> CCMR1 &=~ TIM_CCMR1_OC1M_3;
 80002c6:	4b13      	ldr	r3, [pc, #76]	; (8000314 <init_tim+0x98>)
 80002c8:	699b      	ldr	r3, [r3, #24]
 80002ca:	4a12      	ldr	r2, [pc, #72]	; (8000314 <init_tim+0x98>)
 80002cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002d0:	6193      	str	r3, [r2, #24]

//Frequency register: ARR, where period is 1000
TIM1 -> ARR = 100;
 80002d2:	4b10      	ldr	r3, [pc, #64]	; (8000314 <init_tim+0x98>)
 80002d4:	2264      	movs	r2, #100	; 0x64
 80002d6:	62da      	str	r2, [r3, #44]	; 0x2c

//Duty cycle
TIM1 -> CCR1 = dutty;
 80002d8:	4a0e      	ldr	r2, [pc, #56]	; (8000314 <init_tim+0x98>)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	6353      	str	r3, [r2, #52]	; 0x34

//
TIM1 -> BDTR |= TIM_BDTR_MOE;
 80002de:	4b0d      	ldr	r3, [pc, #52]	; (8000314 <init_tim+0x98>)
 80002e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002e2:	4a0c      	ldr	r2, [pc, #48]	; (8000314 <init_tim+0x98>)
 80002e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002e8:	6453      	str	r3, [r2, #68]	; 0x44
TIM1 -> CCER |= TIM_CCER_CC1E;
 80002ea:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <init_tim+0x98>)
 80002ec:	6a1b      	ldr	r3, [r3, #32]
 80002ee:	4a09      	ldr	r2, [pc, #36]	; (8000314 <init_tim+0x98>)
 80002f0:	f043 0301 	orr.w	r3, r3, #1
 80002f4:	6213      	str	r3, [r2, #32]
TIM1 -> CR1 |= TIM_CR1_CEN;
 80002f6:	4b07      	ldr	r3, [pc, #28]	; (8000314 <init_tim+0x98>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a06      	ldr	r2, [pc, #24]	; (8000314 <init_tim+0x98>)
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	6013      	str	r3, [r2, #0]
}
 8000302:	bf00      	nop
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40021000 	.word	0x40021000
 8000314:	40012c00 	.word	0x40012c00

08000318 <EXTI0_config>:

void EXTI0_config(void){
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800031c:	4b13      	ldr	r3, [pc, #76]	; (800036c <EXTI0_config+0x54>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a12      	ldr	r2, [pc, #72]	; (800036c <EXTI0_config+0x54>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	6193      	str	r3, [r2, #24]
SYSCFG -> EXTICR[0] &=~ SYSCFG_EXTICR1_EXTI0;
 8000328:	4b11      	ldr	r3, [pc, #68]	; (8000370 <EXTI0_config+0x58>)
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	4a10      	ldr	r2, [pc, #64]	; (8000370 <EXTI0_config+0x58>)
 800032e:	f023 030f 	bic.w	r3, r3, #15
 8000332:	6093      	str	r3, [r2, #8]
SYSCFG -> EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;
 8000334:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <EXTI0_config+0x58>)
 8000336:	4a0e      	ldr	r2, [pc, #56]	; (8000370 <EXTI0_config+0x58>)
 8000338:	689b      	ldr	r3, [r3, #8]
 800033a:	6093      	str	r3, [r2, #8]

//Trigger on rising edge
EXTI -> RTSR &=~ EXTI_RTSR_TR0;
 800033c:	4b0d      	ldr	r3, [pc, #52]	; (8000374 <EXTI0_config+0x5c>)
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	4a0c      	ldr	r2, [pc, #48]	; (8000374 <EXTI0_config+0x5c>)
 8000342:	f023 0301 	bic.w	r3, r3, #1
 8000346:	6093      	str	r3, [r2, #8]
EXTI -> FTSR |= EXTI_FTSR_TR0;
 8000348:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <EXTI0_config+0x5c>)
 800034a:	68db      	ldr	r3, [r3, #12]
 800034c:	4a09      	ldr	r2, [pc, #36]	; (8000374 <EXTI0_config+0x5c>)
 800034e:	f043 0301 	orr.w	r3, r3, #1
 8000352:	60d3      	str	r3, [r2, #12]

//Enable interrupt
EXTI -> IMR |= EXTI_IMR_MR0;
 8000354:	4b07      	ldr	r3, [pc, #28]	; (8000374 <EXTI0_config+0x5c>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a06      	ldr	r2, [pc, #24]	; (8000374 <EXTI0_config+0x5c>)
 800035a:	f043 0301 	orr.w	r3, r3, #1
 800035e:	6013      	str	r3, [r2, #0]

//NVIC
NVIC_EnableIRQ(EXTI0_IRQn);
 8000360:	2006      	movs	r0, #6
 8000362:	f7ff ff31 	bl	80001c8 <__NVIC_EnableIRQ>
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000
 8000370:	40010000 	.word	0x40010000
 8000374:	40010400 	.word	0x40010400

08000378 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void){
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
if (EXTI -> PR & EXTI_PR_PR0){
 800037c:	4b0d      	ldr	r3, [pc, #52]	; (80003b4 <EXTI0_IRQHandler+0x3c>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	f003 0301 	and.w	r3, r3, #1
 8000384:	2b00      	cmp	r3, #0
 8000386:	d010      	beq.n	80003aa <EXTI0_IRQHandler+0x32>
//clear interrupt
EXTI -> PR |= EXTI_PR_PR0;
 8000388:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <EXTI0_IRQHandler+0x3c>)
 800038a:	695b      	ldr	r3, [r3, #20]
 800038c:	4a09      	ldr	r2, [pc, #36]	; (80003b4 <EXTI0_IRQHandler+0x3c>)
 800038e:	f043 0301 	orr.w	r3, r3, #1
 8000392:	6153      	str	r3, [r2, #20]
TIM1 -> CCR1 += TIM1 -> ARR/10;
 8000394:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <EXTI0_IRQHandler+0x40>)
 8000396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000398:	4a08      	ldr	r2, [pc, #32]	; (80003bc <EXTI0_IRQHandler+0x44>)
 800039a:	fba2 2303 	umull	r2, r3, r2, r3
 800039e:	08da      	lsrs	r2, r3, #3
 80003a0:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <EXTI0_IRQHandler+0x40>)
 80003a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003a4:	4904      	ldr	r1, [pc, #16]	; (80003b8 <EXTI0_IRQHandler+0x40>)
 80003a6:	4413      	add	r3, r2
 80003a8:	634b      	str	r3, [r1, #52]	; 0x34
}
}
 80003aa:	bf00      	nop
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr
 80003b4:	40010400 	.word	0x40010400
 80003b8:	40012c00 	.word	0x40012c00
 80003bc:	cccccccd 	.word	0xcccccccd

080003c0 <main>:


int main(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0

EXTI0_config();
 80003c6:	f7ff ffa7 	bl	8000318 <EXTI0_config>
init_tim_gpio();
 80003ca:	f7ff ff1b 	bl	8000204 <init_tim_gpio>


while (1)
{

int b = 0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	60fb      	str	r3, [r7, #12]
while (b<100){
 80003d2:	e010      	b.n	80003f6 <main+0x36>

init_tim(b);
 80003d4:	68f8      	ldr	r0, [r7, #12]
 80003d6:	f7ff ff51 	bl	800027c <init_tim>
b++;
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	3301      	adds	r3, #1
 80003de:	60fb      	str	r3, [r7, #12]

for (int i=0; i<5000; i++);
 80003e0:	2300      	movs	r3, #0
 80003e2:	60bb      	str	r3, [r7, #8]
 80003e4:	e002      	b.n	80003ec <main+0x2c>
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	3301      	adds	r3, #1
 80003ea:	60bb      	str	r3, [r7, #8]
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	f241 3287 	movw	r2, #4999	; 0x1387
 80003f2:	4293      	cmp	r3, r2
 80003f4:	ddf7      	ble.n	80003e6 <main+0x26>
while (b<100){
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	2b63      	cmp	r3, #99	; 0x63
 80003fa:	ddeb      	ble.n	80003d4 <main+0x14>
//GPIOE -> BSRR |= GPIO_BSRR_BS_13;
}



if (b>=100){
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	2b63      	cmp	r3, #99	; 0x63
 8000400:	dde5      	ble.n	80003ce <main+0xe>
while(b>0){
 8000402:	e010      	b.n	8000426 <main+0x66>

init_tim(b);
 8000404:	68f8      	ldr	r0, [r7, #12]
 8000406:	f7ff ff39 	bl	800027c <init_tim>
b--;
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	3b01      	subs	r3, #1
 800040e:	60fb      	str	r3, [r7, #12]

for (int i=0; i<5000; i++);
 8000410:	2300      	movs	r3, #0
 8000412:	607b      	str	r3, [r7, #4]
 8000414:	e002      	b.n	800041c <main+0x5c>
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	3301      	adds	r3, #1
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000422:	4293      	cmp	r3, r2
 8000424:	ddf7      	ble.n	8000416 <main+0x56>
while(b>0){
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	2b00      	cmp	r3, #0
 800042a:	dceb      	bgt.n	8000404 <main+0x44>
{
 800042c:	e7cf      	b.n	80003ce <main+0xe>

0800042e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000432:	e7fe      	b.n	8000432 <NMI_Handler+0x4>

08000434 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <HardFault_Handler+0x4>

0800043a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800043e:	e7fe      	b.n	800043e <MemManage_Handler+0x4>

08000440 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000444:	e7fe      	b.n	8000444 <BusFault_Handler+0x4>

08000446 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800044a:	e7fe      	b.n	800044a <UsageFault_Handler+0x4>

0800044c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr

0800045a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800045a:	b480      	push	{r7}
 800045c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800045e:	bf00      	nop
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr

08000468 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800046c:	bf00      	nop
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr

08000476 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000476:	b580      	push	{r7, lr}
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800047a:	f000 f83f 	bl	80004fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
	...

08000484 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <SystemInit+0x20>)
 800048a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800048e:	4a05      	ldr	r2, [pc, #20]	; (80004a4 <SystemInit+0x20>)
 8000490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	e000ed00 	.word	0xe000ed00

080004a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004e0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80004ac:	f7ff ffea 	bl	8000484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004b0:	480c      	ldr	r0, [pc, #48]	; (80004e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80004b2:	490d      	ldr	r1, [pc, #52]	; (80004e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004b4:	4a0d      	ldr	r2, [pc, #52]	; (80004ec <LoopForever+0xe>)
  movs r3, #0
 80004b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b8:	e002      	b.n	80004c0 <LoopCopyDataInit>

080004ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004be:	3304      	adds	r3, #4

080004c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c4:	d3f9      	bcc.n	80004ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004c6:	4a0a      	ldr	r2, [pc, #40]	; (80004f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004c8:	4c0a      	ldr	r4, [pc, #40]	; (80004f4 <LoopForever+0x16>)
  movs r3, #0
 80004ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004cc:	e001      	b.n	80004d2 <LoopFillZerobss>

080004ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d0:	3204      	adds	r2, #4

080004d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d4:	d3fb      	bcc.n	80004ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004d6:	f000 f825 	bl	8000524 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004da:	f7ff ff71 	bl	80003c0 <main>

080004de <LoopForever>:

LoopForever:
    b LoopForever
 80004de:	e7fe      	b.n	80004de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004e0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80004e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004ec:	0800058c 	.word	0x0800058c
  ldr r2, =_sbss
 80004f0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004f4:	20000024 	.word	0x20000024

080004f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004f8:	e7fe      	b.n	80004f8 <ADC1_2_IRQHandler>
	...

080004fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <HAL_IncTick+0x20>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	461a      	mov	r2, r3
 8000506:	4b06      	ldr	r3, [pc, #24]	; (8000520 <HAL_IncTick+0x24>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4413      	add	r3, r2
 800050c:	4a04      	ldr	r2, [pc, #16]	; (8000520 <HAL_IncTick+0x24>)
 800050e:	6013      	str	r3, [r2, #0]
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20000000 	.word	0x20000000
 8000520:	20000020 	.word	0x20000020

08000524 <__libc_init_array>:
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	4d0d      	ldr	r5, [pc, #52]	; (800055c <__libc_init_array+0x38>)
 8000528:	4c0d      	ldr	r4, [pc, #52]	; (8000560 <__libc_init_array+0x3c>)
 800052a:	1b64      	subs	r4, r4, r5
 800052c:	10a4      	asrs	r4, r4, #2
 800052e:	2600      	movs	r6, #0
 8000530:	42a6      	cmp	r6, r4
 8000532:	d109      	bne.n	8000548 <__libc_init_array+0x24>
 8000534:	4d0b      	ldr	r5, [pc, #44]	; (8000564 <__libc_init_array+0x40>)
 8000536:	4c0c      	ldr	r4, [pc, #48]	; (8000568 <__libc_init_array+0x44>)
 8000538:	f000 f818 	bl	800056c <_init>
 800053c:	1b64      	subs	r4, r4, r5
 800053e:	10a4      	asrs	r4, r4, #2
 8000540:	2600      	movs	r6, #0
 8000542:	42a6      	cmp	r6, r4
 8000544:	d105      	bne.n	8000552 <__libc_init_array+0x2e>
 8000546:	bd70      	pop	{r4, r5, r6, pc}
 8000548:	f855 3b04 	ldr.w	r3, [r5], #4
 800054c:	4798      	blx	r3
 800054e:	3601      	adds	r6, #1
 8000550:	e7ee      	b.n	8000530 <__libc_init_array+0xc>
 8000552:	f855 3b04 	ldr.w	r3, [r5], #4
 8000556:	4798      	blx	r3
 8000558:	3601      	adds	r6, #1
 800055a:	e7f2      	b.n	8000542 <__libc_init_array+0x1e>
 800055c:	08000584 	.word	0x08000584
 8000560:	08000584 	.word	0x08000584
 8000564:	08000584 	.word	0x08000584
 8000568:	08000588 	.word	0x08000588

0800056c <_init>:
 800056c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800056e:	bf00      	nop
 8000570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000572:	bc08      	pop	{r3}
 8000574:	469e      	mov	lr, r3
 8000576:	4770      	bx	lr

08000578 <_fini>:
 8000578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057a:	bf00      	nop
 800057c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800057e:	bc08      	pop	{r3}
 8000580:	469e      	mov	lr, r3
 8000582:	4770      	bx	lr
